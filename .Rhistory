### Libraries
suppressPackageStartupMessages(library(dplyr))
### Load data
setwd("C:/Users/Muhsin Karim/Documents/GitHub/fodmaps")
dfFoods <- read.csv(file = "Foods.csv", header = T, stringsAsFactors = F)
dfSymptoms <- read.csv(file = "Symptoms.csv", header = T, stringsAsFactors = F)
dfSleepyPills <- read.csv(file = "Sleepy pills.csv", header = T,  stringsAsFactors = F)
suppressPackageStartupMessages(library(dplyr))
### Load data
setwd("C:/Users/Muhsin Karim/Documents/GitHub/fodmaps")
dfFoods <- read.csv(file = "Foods.csv", header = T, stringsAsFactors = F)
dfSymptoms <- read.csv(file = "Symptoms.csv", header = T, stringsAsFactors = F)
dfFoods$Date <- as.Date(dfFoods$Datetime, format = "%d/%m/%Y")
dfSymptoms$Date <- as.Date(dfSymptoms$Datetime, format = "%d/%m/%Y")
##### Fodmaps data wrangling
# Wrangling and exploratory data analysis
### Libraries
suppressPackageStartupMessages(library(dplyr))
### Load data
setwd("C:/Users/Muhsin Karim/Documents/GitHub/fodmaps")
dfFoods <- read.csv(file = "Foods.csv", header = T, stringsAsFactors = F)
dfSymptoms <- read.csv(file = "Symptoms.csv", header = T, stringsAsFactors = F)
dfSleepyPills <- read.csv(file = "Sleepy pills.csv", header = T,  stringsAsFactors = F)
### Format
## Date
dfFoods$Date <- as.Date(dfFoods$Datetime, format = "%d/%m/%Y")
dfSymptoms$Date <- as.Date(dfSymptoms$Datetime, format = "%d/%m/%Y")
dfSleepyPills$Date <- as.Date(dfSleepyPills$Datetime, format = "%d/%m/%Y")
## Boolean
dfFoods$Fibre[which(dfFoods$Fibre == "true")] <- TRUE
dfFoods$Fibre[which(dfFoods$Fibre == "false")] <- FALSE
dfFoods$Enzymes[which(dfFoods$Enzymes == "true")] <- TRUE
dfFoods$Enzymes[which(dfFoods$Enzymes == "false")] <- FALSE
dfFoods$Fibre <- as.logical(dfFoods$Fibre)
dfFoods$Enzymes <- as.logical(dfFoods$Enzymes)
View(dfFoods)
View(dfSymptoms)
dfSymptoms$Symptoms <- 1
### Select and rename columns by Date
dfF.date <- dfFoods %>%
select(Date,
Food = Food.Ingredient)
dfF.date <- unique(dfF.date)
dfS.date <- dfSymptoms %>%
select(Date,
Symptoms)
dfS.date <- unique(dfS.date)
##### Fodmaps data wrangling
# Wrangling and exploratory data analysis
### Libraries
suppressPackageStartupMessages(library(dplyr))
### Load data
setwd("C:/Users/Muhsin Karim/Documents/GitHub/fodmaps")
dfFoods <- read.csv(file = "Foods.csv", header = T, stringsAsFactors = F)
dfSymptoms <- read.csv(file = "Symptoms.csv", header = T, stringsAsFactors = F)
dfSleepyPills <- read.csv(file = "Sleepy pills.csv", header = T,  stringsAsFactors = F)
### Format
## Date
dfFoods$Date <- as.Date(dfFoods$Datetime, format = "%d/%m/%Y")
dfSymptoms$Date <- as.Date(dfSymptoms$Datetime, format = "%d/%m/%Y")
dfSleepyPills$Date <- as.Date(dfSleepyPills$Datetime, format = "%d/%m/%Y")
## Boolean
dfFoods$Fibre[which(dfFoods$Fibre == "true")] <- TRUE
dfFoods$Fibre[which(dfFoods$Fibre == "false")] <- FALSE
dfFoods$Enzymes[which(dfFoods$Enzymes == "true")] <- TRUE
dfFoods$Enzymes[which(dfFoods$Enzymes == "false")] <- FALSE
dfFoods$Fibre <- as.logical(dfFoods$Fibre)
dfFoods$Enzymes <- as.logical(dfFoods$Enzymes)
## Flag outcome
dfSymptoms$Symptoms <- 1
dfFoods$Datetime <- as.POSIXct(dfFoods$Datetime)
View(dfFoods)
##### Fodmaps data wrangling
# Wrangling and exploratory data analysis
### Libraries
suppressPackageStartupMessages(library(dplyr))
### Load data
setwd("C:/Users/Muhsin Karim/Documents/GitHub/fodmaps")
dfFoods <- read.csv(file = "Foods.csv", header = T, stringsAsFactors = F)
dfSymptoms <- read.csv(file = "Symptoms.csv", header = T, stringsAsFactors = F)
dfSleepyPills <- read.csv(file = "Sleepy pills.csv", header = T,  stringsAsFactors = F)
### Format
## Date
dfFoods$Date <- as.Date(dfFoods$Datetime, format = "%d/%m/%Y")
dfSymptoms$Date <- as.Date(dfSymptoms$Datetime, format = "%d/%m/%Y")
dfSleepyPills$Date <- as.Date(dfSleepyPills$Datetime, format = "%d/%m/%Y")
## Datetime
dfFoods$Datetime <- as.POSIXct(dfFoods$Datetime, tz = 'Australia')
##### Fodmaps data wrangling
# Wrangling and exploratory data analysis
### Libraries
suppressPackageStartupMessages(library(dplyr))
### Load data
setwd("C:/Users/Muhsin Karim/Documents/GitHub/fodmaps")
dfFoods <- read.csv(file = "Foods.csv", header = T, stringsAsFactors = F)
dfSymptoms <- read.csv(file = "Symptoms.csv", header = T, stringsAsFactors = F)
dfSleepyPills <- read.csv(file = "Sleepy pills.csv", header = T,  stringsAsFactors = F)
### Format
## Date
dfFoods$Date <- as.Date(dfFoods$Datetime, format = "%d/%m/%Y")
dfSymptoms$Date <- as.Date(dfSymptoms$Datetime, format = "%d/%m/%Y")
dfSleepyPills$Date <- as.Date(dfSleepyPills$Datetime, format = "%d/%m/%Y")
## Datetime
dfFoods$Datetime <- as.POSIXct(dfFoods$Datetime, tz = 'Australia/Sydney')
View(dfFoods)
##### Fodmaps data wrangling
# Wrangling and exploratory data analysis
### Libraries
suppressPackageStartupMessages(library(dplyr))
### Load data
setwd("C:/Users/Muhsin Karim/Documents/GitHub/fodmaps")
dfFoods <- read.csv(file = "Foods.csv", header = T, stringsAsFactors = F)
dfSymptoms <- read.csv(file = "Symptoms.csv", header = T, stringsAsFactors = F)
dfSleepyPills <- read.csv(file = "Sleepy pills.csv", header = T,  stringsAsFactors = F)
### Format
## Date
dfFoods$Date <- as.Date(dfFoods$Datetime, format = "%d/%m/%Y")
dfSymptoms$Date <- as.Date(dfSymptoms$Datetime, format = "%d/%m/%Y")
dfSleepyPills$Date <- as.Date(dfSleepyPills$Datetime, format = "%d/%m/%Y")
dfFoods$Datetime <- as.POSIXct(dfFoods$Datetime, format = "%d/%m/%y %H:%M:%S")
##### Fodmaps data wrangling
# Wrangling and exploratory data analysis
### Libraries
suppressPackageStartupMessages(library(dplyr))
### Load data
setwd("C:/Users/Muhsin Karim/Documents/GitHub/fodmaps")
dfFoods <- read.csv(file = "Foods.csv", header = T, stringsAsFactors = F)
dfSymptoms <- read.csv(file = "Symptoms.csv", header = T, stringsAsFactors = F)
dfSleepyPills <- read.csv(file = "Sleepy pills.csv", header = T,  stringsAsFactors = F)
### Format
## Date
dfFoods$Date <- as.Date(dfFoods$Datetime, format = "%d/%m/%Y")
dfSymptoms$Date <- as.Date(dfSymptoms$Datetime, format = "%d/%m/%Y")
dfSleepyPills$Date <- as.Date(dfSleepyPills$Datetime, format = "%d/%m/%Y")
## Datetime
dfFoods$Datetime <- as.POSIXct(dfFoods$Datetime, format = "%d/%m/%Y %H:%M:%S")
View(dfFoods)
##### Fodmaps data wrangling
# Wrangling and exploratory data analysis
### Libraries
suppressPackageStartupMessages(library(dplyr))
### Load data
setwd("C:/Users/Muhsin Karim/Documents/GitHub/fodmaps")
dfFoods <- read.csv(file = "Foods.csv", header = T, stringsAsFactors = F)
dfSymptoms <- read.csv(file = "Symptoms.csv", header = T, stringsAsFactors = F)
dfSleepyPills <- read.csv(file = "Sleepy pills.csv", header = T,  stringsAsFactors = F)
### Format
## Date
dfFoods$Date <- as.Date(dfFoods$Datetime, format = "%d/%m/%Y")
dfSymptoms$Date <- as.Date(dfSymptoms$Datetime, format = "%d/%m/%Y")
dfSleepyPills$Date <- as.Date(dfSleepyPills$Datetime, format = "%d/%m/%Y")
## Datetime
dfFoods$Datetime <- as.POSIXct(dfFoods$Datetime, format = "%d/%m/%Y %H:%M:%S")
dfSymptoms$Datetime <- as.POSIXct(dfSymptoms$Datetime, format = "%d/%m/%Y %H:%M:%S")
dfSleepyPills$Datetime <- as.POSIXct(dfSleepyPills$Datetime, format = "%d/%m/%Y %H:%M:%S")
View(dfSleepyPills)
View(dfSymptoms)
##### Fodmaps data wrangling
# Wrangling and exploratory data analysis
### Libraries
suppressPackageStartupMessages(library(dplyr))
### Load data
setwd("C:/Users/Muhsin Karim/Documents/GitHub/fodmaps")
dfFoods <- read.csv(file = "Foods.csv", header = T, stringsAsFactors = F)
dfSymptoms <- read.csv(file = "Symptoms.csv", header = T, stringsAsFactors = F)
dfSleepyPills <- read.csv(file = "Sleepy pills.csv", header = T,  stringsAsFactors = F)
### Format
## Date
dfFoods$Date <- as.Date(dfFoods$Datetime, format = "%d/%m/%Y")
dfSymptoms$Date <- as.Date(dfSymptoms$Datetime, format = "%d/%m/%Y")
dfSleepyPills$Date <- as.Date(dfSleepyPills$Datetime, format = "%d/%m/%Y")
## Datetime
dfFoods$Datetime <- as.POSIXct(dfFoods$Datetime, format = "%d/%m/%Y %H:%M:%S")
dfSymptoms$Datetime <- as.POSIXct(dfSymptoms$Datetime, format = "%d/%m/%Y %H:%M:%S")
dfSleepyPills$Datetime <- as.POSIXct(dfSleepyPills$Datetime, format = "%d/%m/%Y %H:%M:%S")
## Boolean
dfFoods$Fibre[which(dfFoods$Fibre == "true")] <- TRUE
dfFoods$Fibre[which(dfFoods$Fibre == "false")] <- FALSE
dfFoods$Enzymes[which(dfFoods$Enzymes == "true")] <- TRUE
dfFoods$Enzymes[which(dfFoods$Enzymes == "false")] <- FALSE
dfFoods$Fibre <- as.logical(dfFoods$Fibre)
dfFoods$Enzymes <- as.logical(dfFoods$Enzymes)
## Flag outcome
dfSymptoms$Symptoms <- 1
dfF <- dfFoods %>%
select(Datetime,
Food.Ingredient) %>%
arrange(Datetime, desc(Datetime))
View(dfF)
dfS <- dfSymptoms %>%
select(Datetime,
Symptoms) %>%
arrange(Datetime, desc(Datetime))
View(dfS)
dfF <- dfFoods %>%
select(Datetime,
Food.Ingredient) %>%
arrange(Datetime)
dfS$Datetime[1] - dfS$Datetime[2]
as.numeric(dfS$Datetime[1] - dfS$Datetime[2])
Datetime[1]
(as.numeric(dfS$Datetime[1] - dfS$Datetime[2]))/60
(as.numeric(dfS$Datetime[2] - dfS$Datetime[1]))/60
(as.numeric(dfS$Datetime[2] - dfS$Datetime[1]))/60/24
length(dfS)
nrow(dfS)
i=1
datetimeS <- dfS$Datetime[i]
datetimeS
datetimeS - dfF$Datetime
(datetimeS - dfF$Datetime)/60/24
##### Fodmaps data wrangling
# Wrangling and exploratory data analysis
### Libraries
suppressPackageStartupMessages(library(dplyr))
### Load data
setwd("C:/Users/Muhsin Karim/Documents/GitHub/fodmaps")
dfFoods <- read.csv(file = "Foods.csv", header = T, stringsAsFactors = F)
dfSymptoms <- read.csv(file = "Symptoms.csv", header = T, stringsAsFactors = F)
dfSleepyPills <- read.csv(file = "Sleepy pills.csv", header = T,  stringsAsFactors = F)
### Format
## Date
dfFoods$Date <- as.Date(dfFoods$Datetime, format = "%d/%m/%Y")
dfSymptoms$Date <- as.Date(dfSymptoms$Datetime, format = "%d/%m/%Y")
dfSleepyPills$Date <- as.Date(dfSleepyPills$Datetime, format = "%d/%m/%Y")
## Datetime
dfFoods$Datetime <- as.POSIXct(dfFoods$Datetime, format = "%d/%m/%Y %H:%M:%S")
dfSymptoms$Datetime <- as.POSIXct(dfSymptoms$Datetime, format = "%d/%m/%Y %H:%M:%S")
dfSleepyPills$Datetime <- as.POSIXct(dfSleepyPills$Datetime, format = "%d/%m/%Y %H:%M:%S")
## Boolean
dfFoods$Fibre[which(dfFoods$Fibre == "true")] <- TRUE
dfFoods$Fibre[which(dfFoods$Fibre == "false")] <- FALSE
dfFoods$Enzymes[which(dfFoods$Enzymes == "true")] <- TRUE
dfFoods$Enzymes[which(dfFoods$Enzymes == "false")] <- FALSE
dfFoods$Fibre <- as.logical(dfFoods$Fibre)
dfFoods$Enzymes <- as.logical(dfFoods$Enzymes)
## Flag outcome
dfSymptoms$Symptoms <- 1
# Logistic regression------------------------------------------------------------------------------
# Wrangle data frame to flag each food with a symptom within a given time
# Remove dates
# Tidied data will have a food and a flag for symptom
### Create new dataframes
dfF <- dfFoods %>%
select(Datetime,
Food.Ingredient) %>%
arrange(Datetime, desc(Datetime))
dfS <- dfSymptoms %>%
select(Datetime,
Symptoms) %>%
arrange(Datetime, desc(Datetime))
### For each Symptom, flag which foods are in the window
#(as.numeric(dfS$Datetime[2] - dfS$Datetime[1]))/60/24
## Set food window of days from symptom event
window_days = 3 # Any food cosumed
datetimeS <- dfS$Datetime[i]
(datetimeS - dfF$Datetime)/60/24
(datetimeS - dfF$Datetime)
window_hours <- window_days * 24
window_hours
hours <- datetimeS - dfF$Datetime
which(hours >= window_hours)
hours <- datetimeS - dfF$Datetime
hours
##### Fodmaps data wrangling
# Wrangling and exploratory data analysis
### Libraries
suppressPackageStartupMessages(library(dplyr))
### Load data
setwd("C:/Users/Muhsin Karim/Documents/GitHub/fodmaps")
dfFoods <- read.csv(file = "Foods.csv", header = T, stringsAsFactors = F)
dfSymptoms <- read.csv(file = "Symptoms.csv", header = T, stringsAsFactors = F)
dfSleepyPills <- read.csv(file = "Sleepy pills.csv", header = T,  stringsAsFactors = F)
### Format
## Date
dfFoods$Date <- as.Date(dfFoods$Datetime, format = "%d/%m/%Y")
dfSymptoms$Date <- as.Date(dfSymptoms$Datetime, format = "%d/%m/%Y")
dfSleepyPills$Date <- as.Date(dfSleepyPills$Datetime, format = "%d/%m/%Y")
## Datetime
dfFoods$Datetime <- as.POSIXct(dfFoods$Datetime, format = "%d/%m/%Y %H:%M:%S")
dfSymptoms$Datetime <- as.POSIXct(dfSymptoms$Datetime, format = "%d/%m/%Y %H:%M:%S")
dfSleepyPills$Datetime <- as.POSIXct(dfSleepyPills$Datetime, format = "%d/%m/%Y %H:%M:%S")
## Boolean
dfFoods$Fibre[which(dfFoods$Fibre == "true")] <- TRUE
dfFoods$Fibre[which(dfFoods$Fibre == "false")] <- FALSE
dfFoods$Enzymes[which(dfFoods$Enzymes == "true")] <- TRUE
dfFoods$Enzymes[which(dfFoods$Enzymes == "false")] <- FALSE
dfFoods$Fibre <- as.logical(dfFoods$Fibre)
dfFoods$Enzymes <- as.logical(dfFoods$Enzymes)
## Flag outcome
dfSymptoms$Symptoms <- 1
# Logistic regression------------------------------------------------------------------------------
# Wrangle data frame to flag each food with a symptom within a given time
# Remove dates
# Tidied data will have a food and a flag for symptom
### Create new dataframes
dfF <- dfFoods %>%
select(Datetime,
Food.Ingredient) %>%
arrange(Datetime, desc(Datetime))
dfS <- dfSymptoms %>%
select(Datetime,
Symptoms) %>%
arrange(Datetime, desc(Datetime))
View(dfF)
##### Fodmaps data wrangling
# Wrangling and exploratory data analysis
### Libraries
suppressPackageStartupMessages(library(dplyr))
### Load data
setwd("C:/Users/Muhsin Karim/Documents/GitHub/fodmaps")
dfFoods <- read.csv(file = "Foods.csv", header = T, stringsAsFactors = F)
dfSymptoms <- read.csv(file = "Symptoms.csv", header = T, stringsAsFactors = F)
dfSleepyPills <- read.csv(file = "Sleepy pills.csv", header = T,  stringsAsFactors = F)
### Format
## Date
dfFoods$Date <- as.Date(dfFoods$Datetime, format = "%d/%m/%Y")
dfSymptoms$Date <- as.Date(dfSymptoms$Datetime, format = "%d/%m/%Y")
dfSleepyPills$Date <- as.Date(dfSleepyPills$Datetime, format = "%d/%m/%Y")
## Datetime
dfFoods$Datetime <- as.POSIXct(dfFoods$Datetime, format = "%d/%m/%Y %H:%M:%S")
dfSymptoms$Datetime <- as.POSIXct(dfSymptoms$Datetime, format = "%d/%m/%Y %H:%M:%S")
dfSleepyPills$Datetime <- as.POSIXct(dfSleepyPills$Datetime, format = "%d/%m/%Y %H:%M:%S")
## Boolean
dfFoods$Fibre[which(dfFoods$Fibre == "true")] <- TRUE
dfFoods$Fibre[which(dfFoods$Fibre == "false")] <- FALSE
dfFoods$Enzymes[which(dfFoods$Enzymes == "true")] <- TRUE
dfFoods$Enzymes[which(dfFoods$Enzymes == "false")] <- FALSE
dfFoods$Fibre <- as.logical(dfFoods$Fibre)
dfFoods$Enzymes <- as.logical(dfFoods$Enzymes)
## Flag outcome
dfSymptoms$Symptoms <- 1
# Logistic regression------------------------------------------------------------------------------
# Wrangle data frame to flag each food with a symptom within a given time
# Remove dates
# Tidied data will have a food and a flag for symptom
### Create new dataframes
### Create new dataframes
dfF <- dfFoods %>%
select(Datetime,
Food.Ingredient) %>%
arrange(Datetime, desc(Datetime))
View(dfF)
dfF <- dfFoods %>%
select(Datetime,
Food.Ingredient) %>%
arrange(desc(Datetime))
View(dfF)
dfS <- dfSymptoms %>%
select(Datetime,
Symptoms) %>%
arrange(desc(Datetime))
View(dfS)
## Set food window of days from symptom event
window_days <- 3 # Any food cosumed
window_hours <- window_days * 24
datetimeS <- dfS$Datetime[i]
datetimeS
hours <- datetimeS - dfF$Datetime
hours
which(hours > 0 && hours <= window_hours)
which(hours > 0 & hours <= window_hours)
hours <- dfS$Datetime[i] - dfF$Datetime
hours
dfS$Datetime[i]
as.numeric(dfS$Datetime[i] - dfF$Datetime)
hours <- as.numeric(dfS$Datetime[i] - dfF$Datetime)/60
hours
which(hours > 0 & hours <= window_hours)
rowsFlag <- which(hours > 0 & hours <= window_hours)
dfF <- dfFoods %>%
select(Datetime,
Food.Ingredient) %>%
arrange(desc(Datetime))
dfF$Symptom <- 0 # Symptom flag
dfF$Symptom[rowsFlag] <- 1
##### Fodmaps data wrangling
# Wrangling and exploratory data analysis
### Libraries
suppressPackageStartupMessages(library(dplyr))
### Load data
setwd("C:/Users/Muhsin Karim/Documents/GitHub/fodmaps")
dfFoods <- read.csv(file = "Foods.csv", header = T, stringsAsFactors = F)
dfSymptoms <- read.csv(file = "Symptoms.csv", header = T, stringsAsFactors = F)
dfSleepyPills <- read.csv(file = "Sleepy pills.csv", header = T,  stringsAsFactors = F)
### Format
## Date
dfFoods$Date <- as.Date(dfFoods$Datetime, format = "%d/%m/%Y")
dfSymptoms$Date <- as.Date(dfSymptoms$Datetime, format = "%d/%m/%Y")
dfSleepyPills$Date <- as.Date(dfSleepyPills$Datetime, format = "%d/%m/%Y")
## Datetime
dfFoods$Datetime <- as.POSIXct(dfFoods$Datetime, format = "%d/%m/%Y %H:%M:%S")
dfSymptoms$Datetime <- as.POSIXct(dfSymptoms$Datetime, format = "%d/%m/%Y %H:%M:%S")
dfSleepyPills$Datetime <- as.POSIXct(dfSleepyPills$Datetime, format = "%d/%m/%Y %H:%M:%S")
## Boolean
dfFoods$Fibre[which(dfFoods$Fibre == "true")] <- TRUE
dfFoods$Fibre[which(dfFoods$Fibre == "false")] <- FALSE
dfFoods$Enzymes[which(dfFoods$Enzymes == "true")] <- TRUE
dfFoods$Enzymes[which(dfFoods$Enzymes == "false")] <- FALSE
dfFoods$Fibre <- as.logical(dfFoods$Fibre)
dfFoods$Enzymes <- as.logical(dfFoods$Enzymes)
## Flag outcome
dfSymptoms$Symptoms <- 1
# Logistic regression------------------------------------------------------------------------------
# Wrangle data frame to flag each food with a symptom within a given time
# Remove dates
# Tidied data will have a food and a flag for symptom
### Create new dataframes
dfF <- dfFoods %>%
select(Datetime,
Food.Ingredient) %>%
arrange(desc(Datetime))
dfF$Symptom <- 0 # Symptom flag
dfS <- dfSymptoms %>%
select(Datetime,
Symptoms) %>%
arrange(desc(Datetime))
### For each Symptom, flag which foods are in the window
## Set food window of days from symptom event
window_days <- 3 # Any food cosumed
window_hours <- window_days * 24
## Iterate through each Symptom datetime
## Iterate through each Symptom datetime
for (i in 1:nrow(dfS)) {
## Get the difference between the symptom and food datetimes
hours <- as.numeric(dfS$Datetime[i] - dfF$Datetime)/60
## Get the rows within the window
rowsFlag <- which(hours > 0 & hours <= window_hours)
## Impute symptom flag
dfF$Symptom[rowsFlag] <- 1
}
table(dfF$Symptom)
## Set food window of days from symptom event
window_days <- 2 # Any food cosumed
window_hours <- window_days * 24
## Set Symptom flag to none
dfF$Symptom <- 0 # Symptom flag
## Iterate through each Symptom datetime
for (i in 1:nrow(dfS)) {
## Get the difference between the symptom and food datetimes
hours <- as.numeric(dfS$Datetime[i] - dfF$Datetime)/60
## Get the rows within the window
rowsFlag <- which(hours > 0 & hours <= window_hours)
## Impute symptom flag
dfF$Symptom[rowsFlag] <- 1
}
table(dfF$Symptom)
## Set food window of days from symptom event
window_days <- 1 # Any food cosumed
window_hours <- window_days * 24
## Set Symptom flag to none
dfF$Symptom <- 0 # Symptom flag
## Iterate through each Symptom datetime
for (i in 1:nrow(dfS)) {
## Get the difference between the symptom and food datetimes
hours <- as.numeric(dfS$Datetime[i] - dfF$Datetime)/60
## Get the rows within the window
rowsFlag <- which(hours > 0 & hours <= window_hours)
## Impute symptom flag
dfF$Symptom[rowsFlag] <- 1
}
table(dfF$Symptom)
### For each Symptom, flag which foods are in the window
## Set food window of days from symptom event
window_days <- 1 # Any food cosumed
window_hours <- window_days * 24
## Set Symptom flag to none
dfF$Symptom <- 0 # Symptom flag
## Iterate through each Symptom datetime
for (i in 1:nrow(dfS)) {
## Get the difference between the symptom and food datetimes
hours <- as.numeric(dfS$Datetime[i] - dfF$Datetime)/60
## Get the rows within the window
rowsFlag <- which(hours > 0 & hours <= window_hours)
## Add one to symptom count
dfF$Symptom[rowsFlag] <- dfF$Symptom[rowsFlag] + 1
}
## Set food window of days from symptom event
# window_days <- 1 # Any food cosumed
# window_hours <- window_days * 24
window_hours <- 6
## Set Symptom flag to none
dfF$Symptom <- 0 # Symptom flag
## Iterate through each Symptom datetime
for (i in 1:nrow(dfS)) {
## Get the difference between the symptom and food datetimes
hours <- as.numeric(dfS$Datetime[i] - dfF$Datetime)/60
## Get the rows within the window
rowsFlag <- which(hours > 0 & hours <= window_hours)
## Impute symptom flag
dfF$Symptom[rowsFlag] <- 1
# ## Add one to symptom count
# dfF$Symptom[rowsFlag] <- dfF$Symptom[rowsFlag] + 1
}
### For each Symptom, flag which foods are in the window
## Set food window of days from symptom event
# window_days <- 1 # Any food cosumed
# window_hours <- window_days * 24
window_hours <- 2
## Set Symptom flag to none
dfF$Symptom <- 0 # Symptom flag
## Iterate through each Symptom datetime
for (i in 1:nrow(dfS)) {
## Get the difference between the symptom and food datetimes
hours <- as.numeric(dfS$Datetime[i] - dfF$Datetime)/60
## Get the rows within the window
rowsFlag <- which(hours > 0 & hours <= window_hours)
## Impute symptom flag
dfF$Symptom[rowsFlag] <- 1
# ## Add one to symptom count
# dfF$Symptom[rowsFlag] <- dfF$Symptom[rowsFlag] + 1
}
